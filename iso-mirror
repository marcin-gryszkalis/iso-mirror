#!/usr/bin/perl
# https://github.com/marcin-gryszkalis/iso-mirror
my $VERSION  = '0.1';

use warnings;
use strict;
use feature qw/state signatures say multidimensional/;
use utf8;
use open qw(:std :encoding(UTF-8));

use File::Slurp;
use Data::Dumper;
use FindBin qw($Bin);
use JSON qw(decode_json);
use YAML ();
use Config::INI::Reader;
use Version::Compare;
use Pod::Usage;
use Getopt::Long;
use Net::Curl::Easy qw(:constants);
use Net::Curl::Form qw(:constants);
use Term::ProgressBar;
use Number::Bytes::Human qw(format_bytes);
use List::Util qw/min max first sum sum0 product all any uniq head tail reduce pairs zip mesh/;
use List::MoreUtils qw/firstidx frequency mode slide minmax/;
# use POSIX qw/ceil floor/;

our %options;

sub usage {
    pod2usage( -verbose => 2 );
    exit 0;
}

my $opt_dryrun = 0;
my $opt_config = undef;
my $opt_system = undef;
my $opt_curldebug = 0;
GetOptions ("dryrun|n" => \$opt_dryrun,
            "config|c=s"   => \$opt_config,
            "system|s=s"  => \$opt_system,
            "curldebug|d" => \$opt_curldebug)
or usage();

sub write_file_ok
{
    write_file($_[0], {binmode => ':utf8'}, $_[1]);
}

my $logfh = *STDOUT;
sub LOG
{
    my $d = POSIX::strftime("%F %T", localtime);
    my $m = join(" ",@_);
    $m =~ s/[\r\n]/ /g;
    print($logfh "$d $m\n");
}

sub LOGraw
{
    my $m = join(" ",@_);
    print($logfh "$m\n");
}

sub ERR
{
    LOG "ERROR: ".shift;
    exit 1;
}

sub WARN
{
    LOG "WARNING: ".shift;
}

sub curl_init()
{

my $curl = Net::Curl::Easy->new();
$curl->setopt(CURLOPT_FOLLOWLOCATION, 1);
$curl->setopt(CURLOPT_AUTOREFERER, 1);
$curl->setopt(CURLOPT_MAXREDIRS, 64);

$curl->setopt(CURLOPT_FORBID_REUSE, 0);

$curl->setopt( CURLOPT_COOKIEFILE, undef);
# $curl->setopt(CURLOPT_SSL_VERIFYPEER, 0);
# $curl->setopt(CURLOPT_SSL_VERIFYHOST, 0);
$curl->setopt(CURLOPT_FAILONERROR, 1);

$curl->setopt(CURLOPT_HTTPGET, 1); #
# $curl->setopt(CURLOPT_POST, 0);
# $curl->setopt(CURLOPT_NOBODY, 0); # HEAD

    # if (defined $cfg{proxy})
    # {
    #     $curl->setopt(CURLOPT_PROXY, $cfg{proxy});
    #     if ($cfg{proxy} =~ m{^socks})
    #     {
    #         $curl->setopt(CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);
    #     }
    #     elsif ($cfg{proxy} =~ m{^https})
    #     {
    #         $curl->setopt(CURLOPT_PROXYTYPE, CURLPROXY_HTTPS);
    #     }
    #     else
    #     {
    #         $curl->setopt(CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
    #         # $curl->setopt(CURLOPT_PROXYTYPE, CURLPROXY_HTTP_1_0);
    #     }
    #     # curl->setopt(curl, CURLOPT_HTTPPROXYTUNNEL, 1);
    # }

    # if (defined $cfg{sourceip})
    # {
    #     $curl->setopt(CURLOPT_INTERFACE, $cfg{sourceip});
    # }

# debug:
$curl->setopt(CURLOPT_VERBOSE, 1) if $opt_curldebug;

return $curl;
}

sub xget($url)
{
    my $curl = curl_init();
    my $contents;
    $curl->setopt(CURLOPT_URL, $url);
    $curl->setopt(CURLOPT_WRITEDATA, \$contents);

    eval 
    {
        $curl->perform();
    };

    return "" if ref $@ eq "Net::Curl::Easy::Code"; 
    return $contents;
}

sub xlen($url)
{
    my $curl = curl_init();
    $curl->setopt(CURLOPT_URL, $url);
    $curl->setopt(CURLOPT_NOBODY, 1); # HEAD
    eval
    {
        $curl->perform();
    };

    $curl->setopt(CURLOPT_NOBODY, 0);
    return 0 if ref $@ eq "Net::Curl::Easy::Code"; 
    my $len = $curl->getinfo(CURLINFO_CONTENT_LENGTH_DOWNLOAD);
    return $len;
}

my $progressbar = undef;
my $progressbarlabel = '';
sub curl_progress 
{
    my ($easy, $dltotal, $dlnow, $ultotal, $ulnow, $uservar) = @_;

    return 0 if $dlnow == 0;

    $progressbar = Term::ProgressBar->new({count => 100, name => $progressbarlabel, ETA => 'linear', term_width => 80 }) unless defined $progressbar;

    my $percent = $dltotal > 0 ? int($dlnow * 100 / $dltotal) : 0;
    $progressbar->update($percent); 

    return 0;
}

sub xdownload($url, $dest, $label)
{
    my $curl = curl_init();
    $curl->setopt(CURLOPT_URL, $url);
    open(my $f, ">", $dest) or ERR "Cannot save to $dest -- $!";
    binmode($f);
    $curl->setopt(CURLOPT_WRITEDATA, $f);

    $curl->setopt(CURLOPT_NOPROGRESS, 0);
    $curl->setopt(CURLOPT_XFERINFOFUNCTION, \&curl_progress);
    $progressbarlabel = $label;

    eval
    {
        $curl->perform();
    };

    LOGraw "" if defined $progressbar; # break line after progress bar

    if (ref $@ eq "Net::Curl::Easy::Code")
    {
        my $rc = $curl->getinfo(CURLINFO_RESPONSE_CODE);
        WARN "Problem downloading $url: $@ (response code: $rc)";
        close $f;
        unlink $dest;
    } 
    else
    {
        ERR $@ if $@;
    }   

    $curl->setopt(CURLOPT_NOPROGRESS, 1);
    $progressbar = undef;
}

sub isyes($s)
{
    return 0 unless defined $s;
    return $s =~ /yes/i;
}

LOG "iso-mirror $VERSION";
LOG "Loading configs";
my $iso = YAML::LoadFile("$Bin/iso.yaml");
my $cfg = YAML::LoadFile("$Bin/config.yaml");
$cfg = $cfg->{Options};

my %rlengths; # url -> content-length
my %todownload; # url -> dest file

for my $system (@{$cfg->{"system"}})
{
    next if defined $opt_system && $system ne $opt_system;

    LOG "System: $system";
    unless (exists $iso->{Systems}->{$system})
    {
        ERR "cannot find $system in iso.yaml configuration";
    }

    my $s = $iso->{Systems}->{$system};
    my $h = xget($s->{"versions-url"});
    if ($h eq '')
    {
        WARN "cannot get $s->{'versions-url'}";
        next;
    }

    my @vers = ($h =~ /$s->{"versions-rule"}/g);
    if (scalar @vers == 0)
    {
        WARN "Cannot find any valid version";
    }

    my @uv = ();
    for my $v (uniq @vers)
    {
        LOG "Checking $system version: $v";
        if(exists $s->{"min-version"} && &Version::Compare::version_compare($v,$s->{"min-version"}) == -1)
        {
            next;
        }
        push(@uv, $v);
    }

    for my $v (@uv)
    {
        for my $architecture (@{$cfg->{architecture}})
        {
            my $arc = $architecture;
            if (exists $s->{"architecture-map"})
            {
                for my $am (@{$s->{"architecture-map"}})
                {
                    my ($a,$b) = split/\s+/, $am;
                    $arc = $b if $arc eq $a;
                }
            }

            LOG "Verify $system version: $v architecture: $arc";
            my @urls = ();

            if (exists $s->{"download-url"})
            {   
                my $durl = $s->{"download-url"};
                $durl =~ s/{version}/$v/g;
                $durl =~ s/{architecture}/$arc/g;

                my $drule = $s->{"download-rule"};
                $drule =~ s/{version}/$v/g;
                $drule =~ s/{architecture}/$arc/g;
                    
                my $h = xget($durl);
                my @du = ($h =~ /$drule/g);
                push(@urls, uniq @du);
            }   

            if (exists $s->{"download"})
            {
                if (ref $s->{"download"} eq 'ARRAY')
                {
                    push(@urls, @{$s->{"download"}});
                }
                else
                {
                    push(@urls, $s->{"download"});
                }
            }

            @urls = uniq sort @urls;
            for my $u (@urls)
            {
                $u =~ s/{version}/$v/g;
                $u =~ s/{architecture}/$arc/g;
            }

            for my $u (@urls)
            {
                LOG "Process URL: $u";

                my $fn = $u;
                $fn =~ s{.*/}{};

                mkdir $cfg->{"destination-dir"} unless -d $cfg->{"destination-dir"};
                my $ddir = $cfg->{"destination-dir"}.(isyes($cfg->{"dir-per-system"}) ? "/$system/" : "/");
                $ddir =~ s{/+}{/}g;
                mkdir $ddir unless -f $ddir;
                my $dest = "$ddir/$fn";
                $dest =~ s{/+}{/}g;

                if (isyes($s->{"append-version"}))
                {
                    my $pd = $dest;
                    $dest =~ s/\.([a-z0-9]+)$/-$v.$1/i;
                    LOG "Append version: $pd -> $dest";
                }

                my $rl = xlen($u);
                if ($rl > 0)
                {
                    $rlengths{$u} = $rl;
                    LOG sprintf("Remote length: %s (%s)", format_bytes($rl), $rl);
                }

                if (-f $dest)
                {
                    my $ll = -s $dest;
                    if ($rl > 0 && $rl == $ll) # exists and same length
                    {
                        LOG "Skip $u";
                        next;
                    }
                
                    unlink $dest;
                }

                LOG "Download $u (".format_bytes($rl).") -> $dest";
                $todownload{$u} = $dest;
                xdownload($u, $dest, "$system $v $arc");
            }

        }
    }

}

# my $count;
# sub add { $count += shift @ARGV; }
# $count += $options{'--inc'};
# print "Count: $count\n";

# eval {
#   $result = (Term::ReadKey::GetTerminalSize($fh))[0];
#   $result-- if ($^O eq "MSWin32" or $^O eq "cygwin");
# }; if ( $@ ) {
#   warn "error from Term::ReadKey::GetTerminalSize(): $@";
# }


=pod

=head1 NAME

iso-mirror -- mirror set of .iso files for use in multiboot environment like I<Ventoy>

=head1 SYNOPSIS

iso-mirror [B<--config>=I<file>] [B<--dry-run>] [B<--version>]

iso-mirror B<--help>

=head1 DESCRIPTION

B<iso-mirror> is


=head1 OPTIONS

=over 1

=item B<-c --config>=I<file>   - specify location of `config.yaml` file
=item B<-s --system>=I<name>   - operate only on given system (e.g. ubuntu)
=item B<-n --dryrun>        - check pages and show what would be downloaded, also show what would be deleted when `delete-obsolete` configuration option is enabled
=item B<-d --curldebug>        - enable libcurl debug output

=back

The integer argument is not checked.

=head1 EXIT STATUS

In case of errors downloading something B<iso-mirror> will exit with status 1.
In case of fatal errors (like syntax error in configuration file) exit code will be 255.

=head1 AUTHOR

Marcin Gryszalis <mg@fork.pl>

=head1 COPYRIGHT AND LICENSE

=head1 SEE ALSO

=cut

# pod2man -c "iso-mirror manual" -r 0.1 iso-mirror > iso-mirror.1
